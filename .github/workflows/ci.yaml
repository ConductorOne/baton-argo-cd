name: ci

on:
  pull_request:

jobs:
  go-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.x
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run linters
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=3m

  go-test:
    strategy:
      matrix:
        go-version: [1.23.x]
        platform: [ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    env:
      URL: ${{ secrets.URL }}
      USERNAME: ${{ secrets.USERNAME }}
      PASSWORD: ${{ secrets.PASSWORD }}
    steps:
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run go tests
        run: (set -o pipefail && go test -v -covermode=atomic -json -race ./... | tee test.json)
      - name: Annotate go tests
        if: always()
        uses: guyarb/golang-test-annotations@v0.6.0
        with:
          test-results: test.json

  integration-test:
    runs-on: ubuntu-latest
    env:
      BATON_LOG_LEVEL: debug
      TEST_USER: "admin"
      TEST_ROLE: "developers"
      PRINCIPAL_ID: "admin"
      PRINCIPAL_TYPE: "user"
      ENTITLEMENT_ID: "role:developers:assigned"
      GRANT_ID: "role:developers:assigned:user:admin"
    steps:
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.x

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.10.0

      - name: Install ArgoCD
        run: |
          kubectl create namespace argocd
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/v2.11.2/manifests/install.yaml
          kubectl wait --for=condition=ready pod --all -n argocd --timeout=5m

      - name: Install ArgoCD CLI
        run: |
          sudo curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/download/v2.11.2/argocd-linux-amd64
          sudo chmod +x /usr/local/bin/argocd

      - name: Configure ArgoCD
        run: |
          kubectl patch configmap argocd-cm -n argocd \
            --type=merge \
            -p '{"data":{"accounts.admin":"apiKey"}}'

          kubectl patch configmap argocd-rbac-cm -n argocd \
            --type=merge \
            -p '{"data":{"policy.csv":"p, role:admin, applications, *, *, allow\np, role:admin, apikey, *, *, allow\np, role:developers, applications, get, default/*, allow\n"}}'

          kubectl rollout restart deployment argocd-server -n argocd
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=argocd-server -n argocd --timeout=2m

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Install baton
        run: |
          chmod +x ./scripts/get-baton.sh
          ./scripts/get-baton.sh
          sudo mv baton /usr/local/bin/

      - name: Run Grant and Revoke Tests
        run: |
          set -ex

          echo "Starting port-forward..."
          kubectl port-forward svc/argocd-server -n argocd 8080:80 >/dev/null 2>&1 &
          PORT_FORWARD_PID=$!
          trap "echo 'Cleaning up port-forward process...'; kill $PORT_FORWARD_PID" EXIT

          echo "Waiting for port-forward..."
          for i in {1..30}; do
              if nc -z 127.0.0.1 8080; then
                  echo "Port-forward is ready."
                  break
              fi
              sleep 1
          done
          if ! nc -z 127.0.0.1 8080; then
              echo "Port-forward failed to start."
              exit 1
          fi

          ARGO_CD_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
          echo "::add-mask::$ARGO_CD_PASSWORD"

          go build -o baton-argo-cd ./cmd/baton-argo-cd

          BATON_ARGS="--api-url http://127.0.0.1:8080 --username admin --password $ARGO_CD_PASSWORD --log-level debug"

          ./baton-argo-cd $BATON_ARGS --file sync.c1z
          if [ ! -f "sync.c1z" ]; then
            echo "Error: File sync.c1z was not generated."
            exit 1
          fi

          echo "Granting entitlement..."
          ./baton-argo-cd $BATON_ARGS \
            --grant-entitlement "$ENTITLEMENT_ID" \
            --grant-principal "$PRINCIPAL_ID" \
            --grant-principal-type "$PRINCIPAL_TYPE"

          echo "Re-syncing after grant..."
          ./baton-argo-cd $BATON_ARGS --file sync.c1z

          echo "Verifying grant..."
          baton grants --entitlement="$ENTITLEMENT_ID" --file sync.c1z --output-format=json | jq -e --arg principal "$PRINCIPAL_ID" 'any((.grants // [])[]; .principal.id.resource == $principal)'

          echo "Revoking grant..."
          ./baton-argo-cd $BATON_ARGS --revoke-grant "$GRANT_ID"

          echo "Re-syncing after revoke..."
          ./baton-argo-cd $BATON_ARGS --file sync.c1z

          echo "Verifying revoke..."
          if baton grants --entitlement="$ENTITLEMENT_ID" --file sync.c1z --output-format=json | jq -e --arg principal "$PRINCIPAL_ID" 'any((.grants // [])[]; .principal.id.resource == $principal)'; then
            echo "Error: Grant was not revoked."
            exit 1
          else
            echo "Grant successfully revoked."
          fi
